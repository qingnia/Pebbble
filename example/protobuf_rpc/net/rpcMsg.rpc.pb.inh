// Generated by the Pebble C++ plugin 1.0.1.0 21:05:59 Oct 31 2018
// If you make any local change, they will be lost.
// source: example/protobuf_rpc/net/rpcMsg.proto
#ifndef _PEBBLE_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto_INH_
#define _PEBBLE_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto_INH_


#include "framework/pebble_rpc.h"
#include "rpcMsg.pb.h"

namespace example {

class rpcMsgClientInterface {
public:
    virtual ~rpcMsgClientInterface() {}

    virtual int32_t add(const ::example::CalRequest& request, ::example::CalResponse* response) = 0;
    virtual int32_t Paralleladd(const ::example::CalRequest& request, int32_t* ret_code, ::example::CalResponse* response, uint32_t* num_called, uint32_t* num_parallel) = 0;
    virtual void add(const ::example::CalRequest& request, const cxx::function<void(int32_t ret_code, const ::example::CalResponse& response)>& cb) = 0;
    virtual int32_t login(const ::example::LoginInfo& request, ::example::LoginRet* response) = 0;
    virtual int32_t Parallellogin(const ::example::LoginInfo& request, int32_t* ret_code, ::example::LoginRet* response, uint32_t* num_called, uint32_t* num_parallel) = 0;
    virtual void login(const ::example::LoginInfo& request, const cxx::function<void(int32_t ret_code, const ::example::LoginRet& response)>& cb) = 0;
    virtual int32_t modifyStatus(const ::example::StatusRequest& request, ::example::StatusResponse* response) = 0;
    virtual int32_t ParallelmodifyStatus(const ::example::StatusRequest& request, int32_t* ret_code, ::example::StatusResponse* response, uint32_t* num_called, uint32_t* num_parallel) = 0;
    virtual void modifyStatus(const ::example::StatusRequest& request, const cxx::function<void(int32_t ret_code, const ::example::StatusResponse& response)>& cb) = 0;
    virtual int32_t move(const ::example::moveRequest& request, ::example::StatusResponse* response) = 0;
    virtual int32_t Parallelmove(const ::example::moveRequest& request, int32_t* ret_code, ::example::StatusResponse* response, uint32_t* num_called, uint32_t* num_parallel) = 0;
    virtual void move(const ::example::moveRequest& request, const cxx::function<void(int32_t ret_code, const ::example::StatusResponse& response)>& cb) = 0;
};

class rpcMsgClientImp {
friend class rpcMsgClient;
public:
    rpcMsgClientImp(::pebble::PebbleRpc* rpc);
    virtual ~rpcMsgClientImp();

    int64_t GetHandle();

    int32_t recv_add_sync(int32_t ret, const uint8_t* buff, uint32_t buff_len, ::example::CalResponse* response);
    int32_t recv_add_parallel(int32_t ret, const uint8_t* buff, uint32_t buff_len, int32_t* ret_code, ::example::CalResponse* response);
    int32_t recv_add(int32_t ret, const uint8_t* buff, uint32_t buff_len, cxx::function<void(int ret_code, const ::example::CalResponse& response)>& cb);
    int32_t recv_login_sync(int32_t ret, const uint8_t* buff, uint32_t buff_len, ::example::LoginRet* response);
    int32_t recv_login_parallel(int32_t ret, const uint8_t* buff, uint32_t buff_len, int32_t* ret_code, ::example::LoginRet* response);
    int32_t recv_login(int32_t ret, const uint8_t* buff, uint32_t buff_len, cxx::function<void(int ret_code, const ::example::LoginRet& response)>& cb);
    int32_t recv_modifyStatus_sync(int32_t ret, const uint8_t* buff, uint32_t buff_len, ::example::StatusResponse* response);
    int32_t recv_modifyStatus_parallel(int32_t ret, const uint8_t* buff, uint32_t buff_len, int32_t* ret_code, ::example::StatusResponse* response);
    int32_t recv_modifyStatus(int32_t ret, const uint8_t* buff, uint32_t buff_len, cxx::function<void(int ret_code, const ::example::StatusResponse& response)>& cb);
    int32_t recv_move_sync(int32_t ret, const uint8_t* buff, uint32_t buff_len, ::example::StatusResponse* response);
    int32_t recv_move_parallel(int32_t ret, const uint8_t* buff, uint32_t buff_len, int32_t* ret_code, ::example::StatusResponse* response);
    int32_t recv_move(int32_t ret, const uint8_t* buff, uint32_t buff_len, cxx::function<void(int ret_code, const ::example::StatusResponse& response)>& cb);

private:
    ::pebble::PebbleRpc* m_client;
    int64_t m_handle;
    cxx::function<int64_t(uint64_t)> m_route_func;
    uint64_t m_route_key;
    std::string m_channel_name;
    cxx::unordered_map<std::string, uint32_t> m_methods;
};

class rpcMsgServerInterface;
class __rpcMsgSkeleton : public ::pebble::IPebbleRpcService {
protected:
    ::pebble::PebbleRpc* m_server;

private:
    rpcMsgServerInterface* m_iface;

private:
    int32_t process_add(const uint8_t* buff, uint32_t buff_len, cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp);
    void return_add(cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp, int32_t ret_code, const ::example::CalResponse& response);
    int32_t process_login(const uint8_t* buff, uint32_t buff_len, cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp);
    void return_login(cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp, int32_t ret_code, const ::example::LoginRet& response);
    int32_t process_modifyStatus(const uint8_t* buff, uint32_t buff_len, cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp);
    void return_modifyStatus(cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp, int32_t ret_code, const ::example::StatusResponse& response);
    int32_t process_move(const uint8_t* buff, uint32_t buff_len, cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp);
    void return_move(cxx::function<int32_t(int32_t ret, const uint8_t* buff, uint32_t buff_len)>& rsp, int32_t ret_code, const ::example::StatusResponse& response);

public:
    __rpcMsgSkeleton(::pebble::PebbleRpc* server, rpcMsgServerInterface* iface);
    virtual ~__rpcMsgSkeleton() {}
    virtual int32_t RegisterServiceFunction();
    virtual std::string Name() { return "rpcMsg"; }
};

} // namespace example



#endif // _PEBBLE_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto_INHH_
