// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example/protobuf_rpc/net/rpcMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "example/protobuf_rpc/net/rpcMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace example {

namespace {

const ::google::protobuf::Descriptor* baseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  baseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* playersInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  playersInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* chatReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* chatBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  chatBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* statusBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  statusBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* moveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  moveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* moveBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  moveBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* commonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  commonResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto() {
  protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "example/protobuf_rpc/net/rpcMsg.proto");
  GOOGLE_CHECK(file != NULL);
  baseInfo_descriptor_ = file->message_type(0);
  static const int baseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baseInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baseInfo, status_),
  };
  baseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      baseInfo_descriptor_,
      baseInfo::default_instance_,
      baseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(baseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(baseInfo));
  LoginInfo_descriptor_ = file->message_type(1);
  static const int LoginInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, roomid_),
  };
  LoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInfo_descriptor_,
      LoginInfo::default_instance_,
      LoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInfo));
  playersInfo_descriptor_ = file->message_type(2);
  static const int playersInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersInfo, cr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersInfo, roomholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersInfo, baseinfos_),
  };
  playersInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      playersInfo_descriptor_,
      playersInfo::default_instance_,
      playersInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(playersInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(playersInfo));
  chatReceive_descriptor_ = file->message_type(3);
  static const int chatReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatReceive, said_),
  };
  chatReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatReceive_descriptor_,
      chatReceive::default_instance_,
      chatReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatReceive));
  chatBroadcast_descriptor_ = file->message_type(4);
  static const int chatBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatBroadcast, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatBroadcast, said_),
  };
  chatBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      chatBroadcast_descriptor_,
      chatBroadcast::default_instance_,
      chatBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(chatBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(chatBroadcast));
  CalRequest_descriptor_ = file->message_type(5);
  static const int CalRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalRequest, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalRequest, b_),
  };
  CalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalRequest_descriptor_,
      CalRequest::default_instance_,
      CalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalRequest));
  CalResponse_descriptor_ = file->message_type(6);
  static const int CalResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalResponse, c_),
  };
  CalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CalResponse_descriptor_,
      CalResponse::default_instance_,
      CalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CalResponse));
  StatusReceive_descriptor_ = file->message_type(7);
  static const int StatusReceive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReceive, cmd_),
  };
  StatusReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusReceive_descriptor_,
      StatusReceive::default_instance_,
      StatusReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusReceive));
  statusBroadcast_descriptor_ = file->message_type(8);
  static const int statusBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statusBroadcast, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statusBroadcast, cmd_),
  };
  statusBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      statusBroadcast_descriptor_,
      statusBroadcast::default_instance_,
      statusBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statusBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(statusBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(statusBroadcast));
  moveRequest_descriptor_ = file->message_type(9);
  static const int moveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveRequest, direction_),
  };
  moveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      moveRequest_descriptor_,
      moveRequest::default_instance_,
      moveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(moveRequest));
  moveBroadcast_descriptor_ = file->message_type(10);
  static const int moveBroadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveBroadcast, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveBroadcast, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveBroadcast, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveBroadcast, cardid_),
  };
  moveBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      moveBroadcast_descriptor_,
      moveBroadcast::default_instance_,
      moveBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(moveBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(moveBroadcast));
  commonResponse_descriptor_ = file->message_type(11);
  static const int commonResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonResponse, status_),
  };
  commonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      commonResponse_descriptor_,
      commonResponse::default_instance_,
      commonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(commonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(commonResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    baseInfo_descriptor_, &baseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInfo_descriptor_, &LoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    playersInfo_descriptor_, &playersInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatReceive_descriptor_, &chatReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    chatBroadcast_descriptor_, &chatBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalRequest_descriptor_, &CalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CalResponse_descriptor_, &CalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusReceive_descriptor_, &StatusReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    statusBroadcast_descriptor_, &statusBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    moveRequest_descriptor_, &moveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    moveBroadcast_descriptor_, &moveBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    commonResponse_descriptor_, &commonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto() {
  delete baseInfo::default_instance_;
  delete baseInfo_reflection_;
  delete LoginInfo::default_instance_;
  delete LoginInfo_reflection_;
  delete playersInfo::default_instance_;
  delete playersInfo_reflection_;
  delete chatReceive::default_instance_;
  delete chatReceive_reflection_;
  delete chatBroadcast::default_instance_;
  delete chatBroadcast_reflection_;
  delete CalRequest::default_instance_;
  delete CalRequest_reflection_;
  delete CalResponse::default_instance_;
  delete CalResponse_reflection_;
  delete StatusReceive::default_instance_;
  delete StatusReceive_reflection_;
  delete statusBroadcast::default_instance_;
  delete statusBroadcast_reflection_;
  delete moveRequest::default_instance_;
  delete moveRequest_reflection_;
  delete moveBroadcast::default_instance_;
  delete moveBroadcast_reflection_;
  delete commonResponse::default_instance_;
  delete commonResponse_reflection_;
}

void protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%example/protobuf_rpc/net/rpcMsg.proto\022"
    "\007example\"8\n\010baseInfo\022\016\n\006roleid\030\001 \001(\005\022\014\n\004"
    "name\030\002 \001(\t\022\016\n\006status\030\003 \001(\005\"+\n\tLoginInfo\022"
    "\016\n\006roleid\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\"l\n\013playe"
    "rsInfo\022#\n\002cr\030\001 \001(\0132\027.example.commonRespo"
    "nse\022\022\n\nroomHolder\030\002 \001(\005\022$\n\tbaseInfos\030\003 \003"
    "(\0132\021.example.baseInfo\"\033\n\013chatReceive\022\014\n\004"
    "said\030\001 \001(\t\"-\n\rchatBroadcast\022\016\n\006roleID\030\001 "
    "\001(\005\022\014\n\004said\030\002 \001(\t\"\"\n\nCalRequest\022\t\n\001a\030\001 \001"
    "(\005\022\t\n\001b\030\002 \001(\005\"\030\n\013CalResponse\022\t\n\001c\030\001 \001(\005\""
    "\034\n\rStatusReceive\022\013\n\003cmd\030\001 \001(\005\".\n\017statusB"
    "roadcast\022\016\n\006roleID\030\001 \001(\005\022\013\n\003cmd\030\002 \001(\005\" \n"
    "\013moveRequest\022\021\n\tdirection\030\001 \001(\005\"L\n\rmoveB"
    "roadcast\022\016\n\006roleID\030\001 \001(\005\022\013\n\003cmd\030\002 \001(\005\022\016\n"
    "\006roomID\030\003 \001(\005\022\016\n\006cardID\030\004 \001(\005\" \n\016commonR"
    "esponse\022\016\n\006status\030\001 \001(\0052\234\002\n\006rpcMsg\0220\n\003ad"
    "d\022\023.example.CalRequest\032\024.example.CalResp"
    "onse\0221\n\005login\022\022.example.LoginInfo\032\024.exam"
    "ple.playersInfo\022\?\n\014modifyStatus\022\026.exampl"
    "e.StatusReceive\032\027.example.commonResponse"
    "\0225\n\004move\022\024.example.moveRequest\032\027.example"
    ".commonResponse\0225\n\004chat\022\024.example.chatRe"
    "ceive\032\027.example.commonResponse", 910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "example/protobuf_rpc/net/rpcMsg.proto", &protobuf_RegisterTypes);
  baseInfo::default_instance_ = new baseInfo();
  LoginInfo::default_instance_ = new LoginInfo();
  playersInfo::default_instance_ = new playersInfo();
  chatReceive::default_instance_ = new chatReceive();
  chatBroadcast::default_instance_ = new chatBroadcast();
  CalRequest::default_instance_ = new CalRequest();
  CalResponse::default_instance_ = new CalResponse();
  StatusReceive::default_instance_ = new StatusReceive();
  statusBroadcast::default_instance_ = new statusBroadcast();
  moveRequest::default_instance_ = new moveRequest();
  moveBroadcast::default_instance_ = new moveBroadcast();
  commonResponse::default_instance_ = new commonResponse();
  baseInfo::default_instance_->InitAsDefaultInstance();
  LoginInfo::default_instance_->InitAsDefaultInstance();
  playersInfo::default_instance_->InitAsDefaultInstance();
  chatReceive::default_instance_->InitAsDefaultInstance();
  chatBroadcast::default_instance_->InitAsDefaultInstance();
  CalRequest::default_instance_->InitAsDefaultInstance();
  CalResponse::default_instance_->InitAsDefaultInstance();
  StatusReceive::default_instance_->InitAsDefaultInstance();
  statusBroadcast::default_instance_->InitAsDefaultInstance();
  moveRequest::default_instance_->InitAsDefaultInstance();
  moveBroadcast::default_instance_->InitAsDefaultInstance();
  commonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto {
  StaticDescriptorInitializer_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto() {
    protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  }
} static_descriptor_initializer_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int baseInfo::kRoleidFieldNumber;
const int baseInfo::kNameFieldNumber;
const int baseInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

baseInfo::baseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.baseInfo)
}

void baseInfo::InitAsDefaultInstance() {
}

baseInfo::baseInfo(const baseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.baseInfo)
}

void baseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baseInfo::~baseInfo() {
  // @@protoc_insertion_point(destructor:example.baseInfo)
  SharedDtor();
}

void baseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void baseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* baseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return baseInfo_descriptor_;
}

const baseInfo& baseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

baseInfo* baseInfo::default_instance_ = NULL;

baseInfo* baseInfo::New() const {
  return new baseInfo;
}

void baseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<baseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roleid_, status_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool baseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.baseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.baseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.baseInfo)
  return false;
#undef DO_
}

void baseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.baseInfo)
  // optional int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.baseInfo)
}

::google::protobuf::uint8* baseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.baseInfo)
  // optional int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.baseInfo)
  return target;
}

int baseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const baseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const baseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void baseInfo::MergeFrom(const baseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void baseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void baseInfo::CopyFrom(const baseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baseInfo::IsInitialized() const {

  return true;
}

void baseInfo::Swap(baseInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata baseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = baseInfo_descriptor_;
  metadata.reflection = baseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInfo::kRoleidFieldNumber;
const int LoginInfo::kRoomidFieldNumber;
#endif  // !_MSC_VER

LoginInfo::LoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.LoginInfo)
}

void LoginInfo::InitAsDefaultInstance() {
}

LoginInfo::LoginInfo(const LoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.LoginInfo)
}

void LoginInfo::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInfo::~LoginInfo() {
  // @@protoc_insertion_point(destructor:example.LoginInfo)
  SharedDtor();
}

void LoginInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInfo_descriptor_;
}

const LoginInfo& LoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

LoginInfo* LoginInfo::default_instance_ = NULL;

LoginInfo* LoginInfo::New() const {
  return new LoginInfo;
}

void LoginInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, roomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.LoginInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (tag == 16) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.LoginInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.LoginInfo)
  return false;
#undef DO_
}

void LoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.LoginInfo)
  // optional int32 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.LoginInfo)
}

::google::protobuf::uint8* LoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.LoginInfo)
  // optional int32 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.LoginInfo)
  return target;
}

int LoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInfo::MergeFrom(const LoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInfo::CopyFrom(const LoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInfo::IsInitialized() const {

  return true;
}

void LoginInfo::Swap(LoginInfo* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInfo_descriptor_;
  metadata.reflection = LoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int playersInfo::kCrFieldNumber;
const int playersInfo::kRoomHolderFieldNumber;
const int playersInfo::kBaseInfosFieldNumber;
#endif  // !_MSC_VER

playersInfo::playersInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.playersInfo)
}

void playersInfo::InitAsDefaultInstance() {
  cr_ = const_cast< ::example::commonResponse*>(&::example::commonResponse::default_instance());
}

playersInfo::playersInfo(const playersInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.playersInfo)
}

void playersInfo::SharedCtor() {
  _cached_size_ = 0;
  cr_ = NULL;
  roomholder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

playersInfo::~playersInfo() {
  // @@protoc_insertion_point(destructor:example.playersInfo)
  SharedDtor();
}

void playersInfo::SharedDtor() {
  if (this != default_instance_) {
    delete cr_;
  }
}

void playersInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* playersInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return playersInfo_descriptor_;
}

const playersInfo& playersInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

playersInfo* playersInfo::default_instance_ = NULL;

playersInfo* playersInfo::New() const {
  return new playersInfo;
}

void playersInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cr()) {
      if (cr_ != NULL) cr_->::example::commonResponse::Clear();
    }
    roomholder_ = 0;
  }
  baseinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool playersInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.playersInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .example.commonResponse cr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomHolder;
        break;
      }

      // optional int32 roomHolder = 2;
      case 2: {
        if (tag == 16) {
         parse_roomHolder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomholder_)));
          set_has_roomholder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseInfos;
        break;
      }

      // repeated .example.baseInfo baseInfos = 3;
      case 3: {
        if (tag == 26) {
         parse_baseInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baseinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.playersInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.playersInfo)
  return false;
#undef DO_
}

void playersInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.playersInfo)
  // optional .example.commonResponse cr = 1;
  if (has_cr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cr(), output);
  }

  // optional int32 roomHolder = 2;
  if (has_roomholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomholder(), output);
  }

  // repeated .example.baseInfo baseInfos = 3;
  for (int i = 0; i < this->baseinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->baseinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.playersInfo)
}

::google::protobuf::uint8* playersInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.playersInfo)
  // optional .example.commonResponse cr = 1;
  if (has_cr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cr(), target);
  }

  // optional int32 roomHolder = 2;
  if (has_roomholder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomholder(), target);
  }

  // repeated .example.baseInfo baseInfos = 3;
  for (int i = 0; i < this->baseinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->baseinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.playersInfo)
  return target;
}

int playersInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .example.commonResponse cr = 1;
    if (has_cr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cr());
    }

    // optional int32 roomHolder = 2;
    if (has_roomholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomholder());
    }

  }
  // repeated .example.baseInfo baseInfos = 3;
  total_size += 1 * this->baseinfos_size();
  for (int i = 0; i < this->baseinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baseinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void playersInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const playersInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const playersInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void playersInfo::MergeFrom(const playersInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  baseinfos_.MergeFrom(from.baseinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cr()) {
      mutable_cr()->::example::commonResponse::MergeFrom(from.cr());
    }
    if (from.has_roomholder()) {
      set_roomholder(from.roomholder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void playersInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void playersInfo::CopyFrom(const playersInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool playersInfo::IsInitialized() const {

  return true;
}

void playersInfo::Swap(playersInfo* other) {
  if (other != this) {
    std::swap(cr_, other->cr_);
    std::swap(roomholder_, other->roomholder_);
    baseinfos_.Swap(&other->baseinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata playersInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = playersInfo_descriptor_;
  metadata.reflection = playersInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chatReceive::kSaidFieldNumber;
#endif  // !_MSC_VER

chatReceive::chatReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.chatReceive)
}

void chatReceive::InitAsDefaultInstance() {
}

chatReceive::chatReceive(const chatReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.chatReceive)
}

void chatReceive::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  said_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatReceive::~chatReceive() {
  // @@protoc_insertion_point(destructor:example.chatReceive)
  SharedDtor();
}

void chatReceive::SharedDtor() {
  if (said_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete said_;
  }
  if (this != default_instance_) {
  }
}

void chatReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatReceive_descriptor_;
}

const chatReceive& chatReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

chatReceive* chatReceive::default_instance_ = NULL;

chatReceive* chatReceive::New() const {
  return new chatReceive;
}

void chatReceive::Clear() {
  if (has_said()) {
    if (said_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      said_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.chatReceive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string said = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_said()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->said().data(), this->said().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "said");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.chatReceive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.chatReceive)
  return false;
#undef DO_
}

void chatReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.chatReceive)
  // optional string said = 1;
  if (has_said()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->said().data(), this->said().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "said");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->said(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.chatReceive)
}

::google::protobuf::uint8* chatReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.chatReceive)
  // optional string said = 1;
  if (has_said()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->said().data(), this->said().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "said");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->said(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.chatReceive)
  return target;
}

int chatReceive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string said = 1;
    if (has_said()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->said());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatReceive::MergeFrom(const chatReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_said()) {
      set_said(from.said());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatReceive::CopyFrom(const chatReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatReceive::IsInitialized() const {

  return true;
}

void chatReceive::Swap(chatReceive* other) {
  if (other != this) {
    std::swap(said_, other->said_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatReceive_descriptor_;
  metadata.reflection = chatReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int chatBroadcast::kRoleIDFieldNumber;
const int chatBroadcast::kSaidFieldNumber;
#endif  // !_MSC_VER

chatBroadcast::chatBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.chatBroadcast)
}

void chatBroadcast::InitAsDefaultInstance() {
}

chatBroadcast::chatBroadcast(const chatBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.chatBroadcast)
}

void chatBroadcast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roleid_ = 0;
  said_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

chatBroadcast::~chatBroadcast() {
  // @@protoc_insertion_point(destructor:example.chatBroadcast)
  SharedDtor();
}

void chatBroadcast::SharedDtor() {
  if (said_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete said_;
  }
  if (this != default_instance_) {
  }
}

void chatBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* chatBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return chatBroadcast_descriptor_;
}

const chatBroadcast& chatBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

chatBroadcast* chatBroadcast::default_instance_ = NULL;

chatBroadcast* chatBroadcast::New() const {
  return new chatBroadcast;
}

void chatBroadcast::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    roleid_ = 0;
    if (has_said()) {
      if (said_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        said_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool chatBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.chatBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_said;
        break;
      }

      // optional string said = 2;
      case 2: {
        if (tag == 18) {
         parse_said:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_said()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->said().data(), this->said().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "said");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.chatBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.chatBroadcast)
  return false;
#undef DO_
}

void chatBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.chatBroadcast)
  // optional int32 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional string said = 2;
  if (has_said()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->said().data(), this->said().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "said");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->said(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.chatBroadcast)
}

::google::protobuf::uint8* chatBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.chatBroadcast)
  // optional int32 roleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional string said = 2;
  if (has_said()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->said().data(), this->said().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "said");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->said(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.chatBroadcast)
  return target;
}

int chatBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional string said = 2;
    if (has_said()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->said());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void chatBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const chatBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const chatBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void chatBroadcast::MergeFrom(const chatBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_said()) {
      set_said(from.said());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void chatBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatBroadcast::CopyFrom(const chatBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatBroadcast::IsInitialized() const {

  return true;
}

void chatBroadcast::Swap(chatBroadcast* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(said_, other->said_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata chatBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = chatBroadcast_descriptor_;
  metadata.reflection = chatBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalRequest::kAFieldNumber;
const int CalRequest::kBFieldNumber;
#endif  // !_MSC_VER

CalRequest::CalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.CalRequest)
}

void CalRequest::InitAsDefaultInstance() {
}

CalRequest::CalRequest(const CalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.CalRequest)
}

void CalRequest::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalRequest::~CalRequest() {
  // @@protoc_insertion_point(destructor:example.CalRequest)
  SharedDtor();
}

void CalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalRequest_descriptor_;
}

const CalRequest& CalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

CalRequest* CalRequest::default_instance_ = NULL;

CalRequest* CalRequest::New() const {
  return new CalRequest;
}

void CalRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CalRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(a_, b_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.CalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // optional int32 b = 2;
      case 2: {
        if (tag == 16) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.CalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.CalRequest)
  return false;
#undef DO_
}

void CalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.CalRequest)
  // optional int32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  // optional int32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.CalRequest)
}

::google::protobuf::uint8* CalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.CalRequest)
  // optional int32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  // optional int32 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.CalRequest)
  return target;
}

int CalRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

    // optional int32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalRequest::MergeFrom(const CalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalRequest::CopyFrom(const CalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalRequest::IsInitialized() const {

  return true;
}

void CalRequest::Swap(CalRequest* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalRequest_descriptor_;
  metadata.reflection = CalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CalResponse::kCFieldNumber;
#endif  // !_MSC_VER

CalResponse::CalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.CalResponse)
}

void CalResponse::InitAsDefaultInstance() {
}

CalResponse::CalResponse(const CalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.CalResponse)
}

void CalResponse::SharedCtor() {
  _cached_size_ = 0;
  c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalResponse::~CalResponse() {
  // @@protoc_insertion_point(destructor:example.CalResponse)
  SharedDtor();
}

void CalResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CalResponse_descriptor_;
}

const CalResponse& CalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

CalResponse* CalResponse::default_instance_ = NULL;

CalResponse* CalResponse::New() const {
  return new CalResponse;
}

void CalResponse::Clear() {
  c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.CalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 c = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.CalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.CalResponse)
  return false;
#undef DO_
}

void CalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.CalResponse)
  // optional int32 c = 1;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.CalResponse)
}

::google::protobuf::uint8* CalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.CalResponse)
  // optional int32 c = 1;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.CalResponse)
  return target;
}

int CalResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 c = 1;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CalResponse::MergeFrom(const CalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalResponse::CopyFrom(const CalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalResponse::IsInitialized() const {

  return true;
}

void CalResponse::Swap(CalResponse* other) {
  if (other != this) {
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CalResponse_descriptor_;
  metadata.reflection = CalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusReceive::kCmdFieldNumber;
#endif  // !_MSC_VER

StatusReceive::StatusReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.StatusReceive)
}

void StatusReceive::InitAsDefaultInstance() {
}

StatusReceive::StatusReceive(const StatusReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.StatusReceive)
}

void StatusReceive::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusReceive::~StatusReceive() {
  // @@protoc_insertion_point(destructor:example.StatusReceive)
  SharedDtor();
}

void StatusReceive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusReceive_descriptor_;
}

const StatusReceive& StatusReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

StatusReceive* StatusReceive::default_instance_ = NULL;

StatusReceive* StatusReceive::New() const {
  return new StatusReceive;
}

void StatusReceive::Clear() {
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.StatusReceive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.StatusReceive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.StatusReceive)
  return false;
#undef DO_
}

void StatusReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.StatusReceive)
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.StatusReceive)
}

::google::protobuf::uint8* StatusReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.StatusReceive)
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.StatusReceive)
  return target;
}

int StatusReceive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusReceive::MergeFrom(const StatusReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusReceive::CopyFrom(const StatusReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusReceive::IsInitialized() const {

  return true;
}

void StatusReceive::Swap(StatusReceive* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusReceive_descriptor_;
  metadata.reflection = StatusReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int statusBroadcast::kRoleIDFieldNumber;
const int statusBroadcast::kCmdFieldNumber;
#endif  // !_MSC_VER

statusBroadcast::statusBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.statusBroadcast)
}

void statusBroadcast::InitAsDefaultInstance() {
}

statusBroadcast::statusBroadcast(const statusBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.statusBroadcast)
}

void statusBroadcast::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

statusBroadcast::~statusBroadcast() {
  // @@protoc_insertion_point(destructor:example.statusBroadcast)
  SharedDtor();
}

void statusBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void statusBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* statusBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return statusBroadcast_descriptor_;
}

const statusBroadcast& statusBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

statusBroadcast* statusBroadcast::default_instance_ = NULL;

statusBroadcast* statusBroadcast::New() const {
  return new statusBroadcast;
}

void statusBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<statusBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, cmd_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool statusBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.statusBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional int32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.statusBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.statusBroadcast)
  return false;
#undef DO_
}

void statusBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.statusBroadcast)
  // optional int32 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.statusBroadcast)
}

::google::protobuf::uint8* statusBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.statusBroadcast)
  // optional int32 roleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.statusBroadcast)
  return target;
}

int statusBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void statusBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const statusBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const statusBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void statusBroadcast::MergeFrom(const statusBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void statusBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void statusBroadcast::CopyFrom(const statusBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool statusBroadcast::IsInitialized() const {

  return true;
}

void statusBroadcast::Swap(statusBroadcast* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata statusBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = statusBroadcast_descriptor_;
  metadata.reflection = statusBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int moveRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

moveRequest::moveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.moveRequest)
}

void moveRequest::InitAsDefaultInstance() {
}

moveRequest::moveRequest(const moveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.moveRequest)
}

void moveRequest::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

moveRequest::~moveRequest() {
  // @@protoc_insertion_point(destructor:example.moveRequest)
  SharedDtor();
}

void moveRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void moveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* moveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return moveRequest_descriptor_;
}

const moveRequest& moveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

moveRequest* moveRequest::default_instance_ = NULL;

moveRequest* moveRequest::New() const {
  return new moveRequest;
}

void moveRequest::Clear() {
  direction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool moveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.moveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 direction = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.moveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.moveRequest)
  return false;
#undef DO_
}

void moveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.moveRequest)
  // optional int32 direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.moveRequest)
}

::google::protobuf::uint8* moveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.moveRequest)
  // optional int32 direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->direction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.moveRequest)
  return target;
}

int moveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void moveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const moveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const moveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void moveRequest::MergeFrom(const moveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void moveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void moveRequest::CopyFrom(const moveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool moveRequest::IsInitialized() const {

  return true;
}

void moveRequest::Swap(moveRequest* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata moveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = moveRequest_descriptor_;
  metadata.reflection = moveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int moveBroadcast::kRoleIDFieldNumber;
const int moveBroadcast::kCmdFieldNumber;
const int moveBroadcast::kRoomIDFieldNumber;
const int moveBroadcast::kCardIDFieldNumber;
#endif  // !_MSC_VER

moveBroadcast::moveBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.moveBroadcast)
}

void moveBroadcast::InitAsDefaultInstance() {
}

moveBroadcast::moveBroadcast(const moveBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.moveBroadcast)
}

void moveBroadcast::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  cmd_ = 0;
  roomid_ = 0;
  cardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

moveBroadcast::~moveBroadcast() {
  // @@protoc_insertion_point(destructor:example.moveBroadcast)
  SharedDtor();
}

void moveBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void moveBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* moveBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return moveBroadcast_descriptor_;
}

const moveBroadcast& moveBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

moveBroadcast* moveBroadcast::default_instance_ = NULL;

moveBroadcast* moveBroadcast::New() const {
  return new moveBroadcast;
}

void moveBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<moveBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roleid_, cardid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool moveBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.moveBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // optional int32 cmd = 2;
      case 2: {
        if (tag == 16) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomID;
        break;
      }

      // optional int32 roomID = 3;
      case 3: {
        if (tag == 24) {
         parse_roomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cardID;
        break;
      }

      // optional int32 cardID = 4;
      case 4: {
        if (tag == 32) {
         parse_cardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.moveBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.moveBroadcast)
  return false;
#undef DO_
}

void moveBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.moveBroadcast)
  // optional int32 roleID = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // optional int32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmd(), output);
  }

  // optional int32 roomID = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->roomid(), output);
  }

  // optional int32 cardID = 4;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.moveBroadcast)
}

::google::protobuf::uint8* moveBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.moveBroadcast)
  // optional int32 roleID = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // optional int32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmd(), target);
  }

  // optional int32 roomID = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->roomid(), target);
  }

  // optional int32 cardID = 4;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.moveBroadcast)
  return target;
}

int moveBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roleID = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // optional int32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // optional int32 roomID = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 cardID = 4;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void moveBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const moveBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const moveBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void moveBroadcast::MergeFrom(const moveBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void moveBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void moveBroadcast::CopyFrom(const moveBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool moveBroadcast::IsInitialized() const {

  return true;
}

void moveBroadcast::Swap(moveBroadcast* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(cmd_, other->cmd_);
    std::swap(roomid_, other->roomid_);
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata moveBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = moveBroadcast_descriptor_;
  metadata.reflection = moveBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int commonResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

commonResponse::commonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.commonResponse)
}

void commonResponse::InitAsDefaultInstance() {
}

commonResponse::commonResponse(const commonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:example.commonResponse)
}

void commonResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

commonResponse::~commonResponse() {
  // @@protoc_insertion_point(destructor:example.commonResponse)
  SharedDtor();
}

void commonResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void commonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* commonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return commonResponse_descriptor_;
}

const commonResponse& commonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_example_2fprotobuf_5frpc_2fnet_2frpcMsg_2eproto();
  return *default_instance_;
}

commonResponse* commonResponse::default_instance_ = NULL;

commonResponse* commonResponse::New() const {
  return new commonResponse;
}

void commonResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool commonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.commonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.commonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.commonResponse)
  return false;
#undef DO_
}

void commonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.commonResponse)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.commonResponse)
}

::google::protobuf::uint8* commonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.commonResponse)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.commonResponse)
  return target;
}

int commonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void commonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const commonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const commonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void commonResponse::MergeFrom(const commonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void commonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void commonResponse::CopyFrom(const commonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool commonResponse::IsInitialized() const {

  return true;
}

void commonResponse::Swap(commonResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata commonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = commonResponse_descriptor_;
  metadata.reflection = commonResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

// @@protoc_insertion_point(global_scope)
